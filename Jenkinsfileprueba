#!groovy
def TAG = ""
def pushProperties
def log
def tokens
def fileIncludePatterns = ''
def deploy = 0
def componentName
def componentTag
def componentAppName
def binder
def proyecto = "Unico"
def earName = "unico.ear"			//Modificar segun el nombre del ear.
def tipo = "EAR1"					//Modificar segun el tipo de artefacto en mayusculas, las opciones son: EAR - JASPER - XML - JAR.


pipeline {
	agent any
	   	environment {

		SCM_URL = "https://github.com/nazpot01/Pruebas.git"
	        SCM_CREDENTIALS = "123456789"
		SCM_BRANCH = "*/${BRANCH_NAME}"
		BRANCH_NAME= "clon-master2"
		}
		
	stages {

		stage('test') {
                steps {
                    script{
					sh"pwd"
					step([$class: 'WsCleanup'])
					checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "GitHub token ugithub", url: 'https://github.com/nazpot01/Pruebas.git']]])
					sh('git log --format=%B -1 > '+Workspace+'/GIT_MESSAGE')
					Mensaje = readFile(Workspace+'/GIT_MESSAGE').trim()
					println Mensaje
					
					Mensaje = Mensaje.split('\n')
					a = Mensaje.length
					println a
								if(a>1){						
									n = Mensaje[2].indexOf(':build')
										println n+" este es el index"
										if(n>=0){
											UCD_DEPLOY = 1
										}
										else UCD_DEPLOY = 0
								}
						
							if (UCD_DEPLOY == 1){
									println Mensaje[2] +" este es el mensaje"							
									list = Mensaje[2].split(':')							
									TAG = list[0]
									println TAG
									echo'-------------------------------CHECKOUT TAG '+TAG+'-----------------------------------'
									checkout([$class: 'GitSCM', branches: [[name: 'refs/tags/'+TAG]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "GitHub token ugithub", url: 'https://github.com/nazpot01/Pruebas']]])
							}
						}
				}
			}
		stage('copiado'){
		steps {
			sh"pwd"
			sh"git checkout */${BRANCH_NAME}"
			sh"git diff --name-only origin/master | while read -r line; do cp \${line} /var/jenkins_home/workspace/unicoarchivos ; done"
			}
		
		}
		stage('publisher'){
		steps {
			script {
			String sourceFilePath = "/var/jenkins_home/workspace/unicoarchivos/unico1.ear"
			 String destinationFilePath = "/var/jenkins_home/workspace/Prueba_deploy/unico1.ear"
			 (new AntBuilder()).copy(file: sourceFilePath, tofile: destinationFilePath)
			}
		    }
		}
	}
}
